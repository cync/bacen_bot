#!/usr/bin/env python3
"""
Verifica√ß√£o completa do sistema bacen-cron
"""
import os
import sys
from datetime import datetime, timezone
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sender import is_business_hours, get_execution_logs, log_execution
from storage import get_store
from bacen_feed import get_normativos_hoje

def verify_bacen_cron_system():
    """Verifica se o sistema bacen-cron est√° funcionando corretamente"""
    print("üîç VERIFICA√á√ÉO COMPLETA DO SISTEMA BACEN-CRON")
    print("=" * 60)
    
    # 1. Verificar hor√°rio atual
    print("1Ô∏è‚É£ VERIFICANDO HOR√ÅRIO ATUAL:")
    current_time = datetime.now()
    business_hours_active = is_business_hours()
    
    print(f"üìÖ Data/Hora atual: {current_time.strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üïí Hor√°rio comercial (08:00-19:25): {'ATIVO' if business_hours_active else 'INATIVO'}")
    
    if business_hours_active:
        print("‚úÖ Sistema deve estar executando a cada 10 minutos")
    else:
        print("‚è∞ Sistema fora do hor√°rio - n√£o executar√°")
    
    # 2. Verificar logs de execu√ß√£o
    print(f"\n2Ô∏è‚É£ VERIFICANDO LOGS DE EXECU√á√ÉO:")
    logs = get_execution_logs()
    
    if logs:
        print(f"üìä Total de execu√ß√µes registradas: {len(logs)}")
        
        # √öltimas 5 execu√ß√µes
        recent_logs = logs[-5:]
        print(f"\nüìã √öltimas 5 execu√ß√µes:")
        for i, log in enumerate(recent_logs, 1):
            timestamp = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00'))
            status = log.get('status', 'unknown')
            details = log.get('details', {})
            
            print(f"   {i}. {timestamp.strftime('%d/%m %H:%M:%S')} - {status.upper()}")
            if details:
                if 'normativos_enviados' in details:
                    print(f"      üìÑ Normativos enviados: {details['normativos_enviados']}")
                if 'subscribers_count' in details:
                    print(f"      üë• Inscritos: {details['subscribers_count']}")
                if 'reason' in details:
                    print(f"      üí° Motivo: {details['reason']}")
        
        # Verificar frequ√™ncia
        if len(logs) >= 2:
            last_log = logs[-1]
            second_last_log = logs[-2]
            
            last_time = datetime.fromisoformat(last_log['timestamp'].replace('Z', '+00:00'))
            second_last_time = datetime.fromisoformat(second_last_log['timestamp'].replace('Z', '+00:00'))
            
            time_diff = (last_time - second_last_time).total_seconds() / 60
            print(f"\n‚è±Ô∏è Intervalo entre √∫ltimas execu√ß√µes: {time_diff:.1f} minutos")
            
            if 8 <= time_diff <= 12:
                print("‚úÖ Intervalo correto (8-12 minutos)")
            else:
                print(f"‚ö†Ô∏è Intervalo irregular (esperado: ~10 minutos)")
    else:
        print("‚ùå Nenhum log de execu√ß√£o encontrado")
        print("üí° Sistema pode n√£o estar funcionando")
    
    # 3. Verificar normativos de hoje
    print(f"\n3Ô∏è‚É£ VERIFICANDO NORMATIVOS DE HOJE:")
    try:
        normativos_hoje = get_normativos_hoje()
        print(f"üìÑ Normativos encontrados hoje: {len(normativos_hoje)}")
        
        if normativos_hoje:
            print("üìã Normativos de hoje:")
            for i, normativo in enumerate(normativos_hoje, 1):
                data_str = normativo.published.strftime("%d/%m/%Y %H:%M")
                print(f"   {i}. {normativo.title}")
                print(f"      üìÖ Data: {data_str}")
                print(f"      üîó Link: {normativo.link}")
    except Exception as e:
        print(f"‚ùå Erro ao buscar normativos: {e}")
    
    # 4. Verificar sistema de banco
    print(f"\n4Ô∏è‚É£ VERIFICANDO SISTEMA DE BANCO:")
    try:
        store = get_store()
        health = store.health_check()
        
        if health['status'] == 'healthy':
            print(f"‚úÖ Banco de dados saud√°vel")
            print(f"üë• Usu√°rios inscritos: {health['subscriber_count']}")
            print(f"üìÑ Itens processados: {health['seen_items_count']}")
            
            if health['subscriber_count'] > 0:
                print("‚úÖ H√° usu√°rios inscritos - notifica√ß√µes ser√£o enviadas")
            else:
                print("‚ö†Ô∏è Nenhum usu√°rio inscrito - notifica√ß√µes n√£o ser√£o enviadas")
        else:
            print(f"‚ùå Problema no banco: {health.get('error', 'Erro desconhecido')}")
    except Exception as e:
        print(f"‚ùå Erro ao conectar com banco: {e}")
    
    # 5. Simular pr√≥xima execu√ß√£o
    print(f"\n5Ô∏è‚É£ SIMULANDO PR√ìXIMA EXECU√á√ÉO:")
    if business_hours_active:
        # Calcula pr√≥ximo hor√°rio de execu√ß√£o (arredonda para pr√≥ximo m√∫ltiplo de 10)
        current_minute = current_time.minute
        next_execution_minute = ((current_minute // 10) + 1) * 10
        
        if next_execution_minute >= 60:
            next_execution_minute = 0
            next_hour = current_time.hour + 1
        else:
            next_hour = current_time.hour
        
        next_execution = current_time.replace(hour=next_hour, minute=next_execution_minute, second=0, microsecond=0)
        time_to_next = (next_execution - current_time).total_seconds() / 60
        
        print(f"‚è∞ Pr√≥xima execu√ß√£o estimada: {next_execution.strftime('%H:%M')}")
        print(f"‚è≥ Tempo at√© pr√≥xima execu√ß√£o: {time_to_next:.1f} minutos")
        
        if time_to_next <= 5:
            print("üîÑ Execu√ß√£o muito pr√≥xima - aguarde!")
        else:
            print("‚è≥ Aguarde pr√≥xima execu√ß√£o")
    else:
        print("‚è∞ Sistema inativo - pr√≥xima execu√ß√£o √†s 08:00")
    
    # 6. Resumo e recomenda√ß√µes
    print(f"\n" + "=" * 60)
    print("üìã RESUMO E RECOMENDA√á√ïES")
    print("=" * 60)
    
    issues = []
    if not logs:
        issues.append("‚ùå Nenhum log de execu√ß√£o encontrado")
    if not business_hours_active:
        issues.append("‚è∞ Sistema fora do hor√°rio comercial")
    
    try:
        store = get_store()
        health = store.health_check()
        if health['status'] != 'healthy':
            issues.append("‚ùå Problema no banco de dados")
        if health['subscriber_count'] == 0:
            issues.append("‚ö†Ô∏è Nenhum usu√°rio inscrito")
    except:
        issues.append("‚ùå Erro de conex√£o com banco")
    
    if not issues:
        print("‚úÖ SISTEMA FUNCIONANDO PERFEITAMENTE!")
        print("üéØ Voc√™ receber√° notifica√ß√µes autom√°ticas quando:")
        print("   ‚Ä¢ Surgir um normativo novo")
        print("   ‚Ä¢ Estiver dentro do hor√°rio (08:00-19:25)")
        print("   ‚Ä¢ Sistema executar (a cada 10 minutos)")
    else:
        print("‚ö†Ô∏è PROBLEMAS ENCONTRADOS:")
        for issue in issues:
            print(f"   {issue}")
        
        print(f"\nüõ†Ô∏è SOLU√á√ïES:")
        if "Nenhum log de execu√ß√£o" in str(issues):
            print("   ‚Ä¢ Verificar se servi√ßo 'bacen-cron' est√° rodando no Railway")
        if "Problema no banco" in str(issues):
            print("   ‚Ä¢ Verificar configura√ß√£o do DATABASE_URL")
        if "Nenhum usu√°rio inscrito" in str(issues):
            print("   ‚Ä¢ Enviar 'oi' para o bot para se inscrever")
    
    print(f"\nüåê MONITORAMENTO:")
    print("   ‚Ä¢ Acesse: https://bacenbot-production.up.railway.app/monitor")
    print("   ‚Ä¢ Verifique logs em tempo real")
    print("   ‚Ä¢ Monitore execu√ß√µes a cada 10 minutos")

if __name__ == "__main__":
    verify_bacen_cron_system()
