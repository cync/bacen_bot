import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from pydantic import BaseModel, Field
from storage import get_store
from bacen_feed import (
    get_ultimo_normativo, 
    get_normativos_hoje, 
    get_normativos_ontem, 
    get_normativos_semanal,
    format_normativo_message,
    format_multiple_normativos_message
)

# Load environment variables from .env file
load_dotenv()

class Settings(BaseModel):
    TELEGRAM_TOKEN: str = Field(...)

def get_settings() -> Settings:
    return Settings(TELEGRAM_TOKEN=os.environ["TELEGRAM_TOKEN"])

s = get_settings()
bot = Bot(token=s.TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
store = get_store()

@dp.message(CommandStart())
async def on_start(message: types.Message):
    await message.answer("Ol√°! üëã\n\n<b>Comandos dispon√≠veis:</b>\n‚Ä¢ <b>oi</b> - Autorizar avisos autom√°ticos\n‚Ä¢ <b>/stop</b> - Cancelar avisos\n‚Ä¢ <b>status</b> - Status do sistema\n‚Ä¢ <b>testar</b> - Testar notifica√ß√µes\n‚Ä¢ <b>forcar</b> - For√ßar verifica√ß√£o\n‚Ä¢ <b>ultimo</b> - √öltimo normativo\n‚Ä¢ <b>hoje</b> - Normativos de hoje\n‚Ä¢ <b>ontem</b> - Normativos de ontem\n‚Ä¢ <b>semanal</b> - Normativos desta semana")

@dp.message(Command("stop"))
async def on_stop(message: types.Message):
    store.remove_subscriber(message.chat.id)
    await message.answer("Voc√™ foi removido(a) da lista. ‚ùå\nSe quiser voltar, mande <b>oi</b>.")

@dp.message(F.text.lower() == "oi")
async def on_oi(message: types.Message):
    user = message.from_user
    
    # Verifica se o usu√°rio j√° est√° inscrito
    user_info = store.get_subscriber_info(message.chat.id)
    
    if user_info:
        # Usu√°rio j√° est√° inscrito
        # Usa username se dispon√≠vel, sen√£o usa first_name, sen√£o usa "usu√°rio"
        display_name = user.username or user.first_name or "usu√°rio"
        await message.answer(f"Ol√° @{display_name}, voc√™ j√° est√° cadastrado no Bacen_bot!")
    else:
        # Usu√°rio n√£o est√° inscrito, cadastra
        store.upsert_subscriber(
            chat_id=message.chat.id,
            first_name=user.first_name,
            username=user.username,
        )
        await message.answer("‚úÖ Pronto! Voc√™ autorizou receber resumos de normativos do BACEN.\nPara sair, envie /stop.")

@dp.message(F.text.lower() == "ultimo")
async def on_ultimo(message: types.Message):
    """Retorna o √∫ltimo normativo publicado"""
    try:
        await message.answer("üîç Buscando √∫ltimo normativo...")
        normativo = get_ultimo_normativo()
        
        if normativo:
            msg = format_normativo_message(normativo)
            await message.answer(msg)
        else:
            await message.answer("‚ùå N√£o foi poss√≠vel encontrar o √∫ltimo normativo.")
    except Exception as e:
        await message.answer(f"‚ùå Erro ao buscar √∫ltimo normativo: {str(e)}")

@dp.message(F.text.lower() == "hoje")
async def on_hoje(message: types.Message):
    """Retorna todos os normativos de hoje"""
    try:
        await message.answer("üîç Buscando normativos de hoje...")
        normativos = get_normativos_hoje()
        
        msg = format_multiple_normativos_message(normativos, "Hoje")
        await message.answer(msg)
    except Exception as e:
        await message.answer(f"‚ùå Erro ao buscar normativos de hoje: {str(e)}")

@dp.message(F.text.lower() == "ontem")
async def on_ontem(message: types.Message):
    """Retorna todos os normativos de ontem"""
    try:
        await message.answer("üîç Buscando normativos de ontem...")
        normativos = get_normativos_ontem()
        
        msg = format_multiple_normativos_message(normativos, "Ontem")
        await message.answer(msg)
    except Exception as e:
        await message.answer(f"‚ùå Erro ao buscar normativos de ontem: {str(e)}")

@dp.message(F.text.lower() == "testar")
async def on_testar(message: types.Message):
    """Testa o sistema de notifica√ß√µes autom√°ticas"""
    try:
        await message.answer("üß™ Testando sistema de notifica√ß√µes...")
        
        # Importa e executa o sistema de notifica√ß√µes
        from sender import run_once, is_business_hours
        
        # Verifica hor√°rio
        if not is_business_hours():
            await message.answer("‚è∞ Sistema fora do hor√°rio comercial (08:00-19:25 SP)")
            return
        
        # Executa verifica√ß√£o
        await run_once()
        
        await message.answer("‚úÖ Teste conclu√≠do!\nSe houver normativos novos, voc√™ receber√° notifica√ß√µes.")
        
    except Exception as e:
        await message.answer(f"‚ùå Erro no teste: {str(e)}")

@dp.message()
async def fallback(message: types.Message):
    await message.answer("N√£o entendi ü§ñ ‚Äî Comandos dispon√≠veis:\n‚Ä¢ <b>oi</b> - Autorizar avisos\n‚Ä¢ <b>/stop</b> - Cancelar avisos\n‚Ä¢ <b>status</b> - Status do sistema\n‚Ä¢ <b>testar</b> - Testar notifica√ß√µes\n‚Ä¢ <b>forcar</b> - For√ßar verifica√ß√£o\n‚Ä¢ <b>ultimo</b> - √öltimo normativo\n‚Ä¢ <b>hoje</b> - Normativos de hoje\n‚Ä¢ <b>ontem</b> - Normativos de ontem\n‚Ä¢ <b>semanal</b> - Normativos desta semana")

async def main():
    print("reply_bot: ouvindo mensagens...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
