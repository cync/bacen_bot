#!/usr/bin/env python3
"""
Monitor e for√ßador de execu√ß√£o para garantir funcionamento cont√≠nuo
"""
import os
import sys
import asyncio
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
import pytz

# Load environment variables
load_dotenv()

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configura√ß√£o do fuso hor√°rio brasileiro
BR_TZ = pytz.timezone('America/Sao_Paulo')

async def force_execution():
    """For√ßa uma execu√ß√£o manual"""
    print("üîÑ FOR√áANDO EXECU√á√ÉO MANUAL")
    print("=" * 40)
    
    try:
        from sender import run_once, log_execution, is_business_hours
        
        current_time = datetime.now(BR_TZ)
        print(f"üïí Executando verifica√ß√£o for√ßada √†s {current_time.strftime('%H:%M:%S')}")
        
        # Log de execu√ß√£o for√ßada
        log_execution("forced_execution", {
            "timestamp": current_time.isoformat(),
            "business_hours": is_business_hours(),
            "reason": "manual_force"
        })
        
        # Executa verifica√ß√£o
        await run_once()
        
        print("‚úÖ Execu√ß√£o for√ßada conclu√≠da com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o for√ßada: {e}")
        return False

def check_monitoring_page():
    """Verifica p√°gina de monitoramento"""
    print("üåê VERIFICANDO P√ÅGINA DE MONITORAMENTO")
    print("=" * 50)
    
    try:
        response = requests.get("https://bacenbot-production.up.railway.app/monitor", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ P√°gina de monitoramento acess√≠vel")
            
            # Verifica se h√° logs recentes
            if "Execu√ß√µes Totais" in response.text:
                print("üìä P√°gina mostra estat√≠sticas de execu√ß√£o")
            else:
                print("‚ö†Ô∏è P√°gina n√£o mostra estat√≠sticas")
            
            return True
        else:
            print(f"‚ùå Erro ao acessar p√°gina: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar p√°gina: {e}")
        return False

def check_health_endpoint():
    """Verifica endpoint de health check"""
    print("üè• VERIFICANDO HEALTH CHECK")
    print("=" * 40)
    
    try:
        response = requests.get("https://bacenbot-production.up.railway.app/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check OK: {data.get('status', 'unknown')}")
            print(f"üìÖ Timestamp: {data.get('timestamp', 'unknown')}")
            return True
        else:
            print(f"‚ùå Health check falhou: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no health check: {e}")
        return False

async def monitor_and_fix():
    """Monitora e corrige o sistema"""
    print("üîç MONITORAMENTO E CORRE√á√ÉO AUTOM√ÅTICA")
    print("=" * 60)
    
    # Verifica health check
    health_ok = check_health_endpoint()
    
    # Verifica p√°gina de monitoramento
    monitor_ok = check_monitoring_page()
    
    # For√ßa execu√ß√£o se necess√°rio
    if not health_ok or not monitor_ok:
        print("‚ö†Ô∏è Problemas detectados - for√ßando execu√ß√£o...")
        await force_execution()
    else:
        print("‚úÖ Sistema funcionando normalmente")
    
    # Verifica logs locais
    try:
        import json
        if os.path.exists("cron_executions.json"):
            with open("cron_executions.json", 'r', encoding='utf-8') as f:
                logs = json.load(f)
            
            if logs:
                last_log = logs[-1]
                last_time = datetime.fromisoformat(last_log['timestamp'])
                time_since = (datetime.now(BR_TZ) - last_time).total_seconds()
                
                print(f"\nüìä √öLTIMA EXECU√á√ÉO LOCAL:")
                print(f"   üìÖ Data/Hora: {last_time.strftime('%d/%m/%Y %H:%M:%S')}")
                print(f"   ‚è∞ H√° {time_since/60:.1f} minutos")
                print(f"   üìä Status: {last_log.get('status', 'unknown')}")
                
                if time_since > 20 * 60:  # 20 minutos
                    print("‚ö†Ô∏è Execu√ß√£o muito antiga - for√ßando nova execu√ß√£o...")
                    await force_execution()
            else:
                print("‚ùå Nenhum log local encontrado")
        else:
            print("‚ùå Arquivo de logs n√£o existe")
    except Exception as e:
        print(f"‚ùå Erro ao verificar logs: {e}")

async def main():
    """Fun√ß√£o principal"""
    print("üõ†Ô∏è MONITOR E CORRETOR AUTOM√ÅTICO")
    print("=" * 70)
    
    await monitor_and_fix()
    
    print(f"\nüéØ MONITORAMENTO CONCLU√çDO!")
    print("=" * 50)
    print("‚úÖ Sistema verificado")
    print("‚úÖ Corre√ß√µes aplicadas se necess√°rio")
    print("‚úÖ Logs atualizados")

if __name__ == "__main__":
    asyncio.run(main())
