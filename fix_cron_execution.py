#!/usr/bin/env python3
"""
Diagn√≥stico e corre√ß√£o do problema de execu√ß√£o cont√≠nua do cron
"""
import os
import sys
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import pytz

# Load environment variables
load_dotenv()

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configura√ß√£o do fuso hor√°rio brasileiro
BR_TZ = pytz.timezone('America/Sao_Paulo')

async def diagnose_cron_problem():
    """Diagnostica o problema do cron"""
    print("üîç DIAGN√ìSTICO DO PROBLEMA DO CRON")
    print("=" * 60)
    
    try:
        from sender import run_once, is_business_hours, log_execution
        
        print(f"üïí Hor√°rio atual: {datetime.now(BR_TZ).strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üïí Hor√°rio comercial ativo: {is_business_hours()}")
        
        # Testa execu√ß√£o √∫nica
        print(f"\nüß™ Testando execu√ß√£o √∫nica...")
        await run_once()
        print(f"‚úÖ Execu√ß√£o √∫nica funcionou")
        
        # Verifica logs
        try:
            import json
            with open("cron_executions.json", 'r', encoding='utf-8') as f:
                logs = json.load(f)
            
            print(f"\nüìä Logs atuais: {len(logs)}")
            if logs:
                last_log = logs[-1]
                last_time = datetime.fromisoformat(last_log['timestamp'])
                print(f"üìÖ √öltima execu√ß√£o: {last_time.strftime('%d/%m/%Y %H:%M:%S')}")
                print(f"üìä Status: {last_log.get('status', 'unknown')}")
        
        except Exception as e:
            print(f"‚ùå Erro ao verificar logs: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")
        return False

def check_railway_configuration():
    """Verifica configura√ß√£o do Railway"""
    print(f"\nüöÇ VERIFICANDO CONFIGURA√á√ÉO RAILWAY")
    print("=" * 50)
    
    print("üîç Poss√≠veis problemas:")
    print("1. ‚ùå Servi√ßo 'bacen-cron' n√£o est√° rodando")
    print("2. ‚ùå Servi√ßo est√° crashando ap√≥s execu√ß√£o")
    print("3. ‚ùå Problema de mem√≥ria/recursos")
    print("4. ‚ùå Erro n√£o tratado est√° matando o processo")
    print("5. ‚ùå Railway est√° reiniciando o servi√ßo")
    
    print(f"\nüõ†Ô∏è SOLU√á√ïES:")
    print("1. ‚úÖ Adicionar tratamento de erro mais robusto")
    print("2. ‚úÖ Adicionar logs de debug")
    print("3. ‚úÖ Implementar restart autom√°tico")
    print("4. ‚úÖ Verificar logs do Railway")
    print("5. ‚úÖ Testar servi√ßo localmente")

def create_robust_cron():
    """Cria vers√£o mais robusta do cron"""
    print(f"\nüîß CRIANDO VERS√ÉO ROBUSTA DO CRON")
    print("=" * 50)
    
    robust_cron_code = '''
async def run_cron_robust():
    """Executa o cron de forma mais robusta"""
    print("üïí Iniciando cron robusto do sender (10 em 10 min, 08:00-19:25h SP)")
    
    consecutive_errors = 0
    max_consecutive_errors = 5
    
    while True:
        try:
            if HAS_TZ:
                current_time = datetime.now(BR_TZ)
            else:
                current_time = datetime.now(timezone.utc)
            
            print(f"‚è∞ Executando cron em {current_time}")
            
            # Executa verifica√ß√£o
            await run_once()
            
            # Reset contador de erros em caso de sucesso
            consecutive_errors = 0
            
            print(f"‚úÖ Execu√ß√£o conclu√≠da com sucesso")
            
        except Exception as e:
            consecutive_errors += 1
            print(f"‚ùå Erro no cron (tentativa {consecutive_errors}): {e}")
            
            # Log do erro
            try:
                log_execution("error", {
                    "reason": "cron_execution_error",
                    "error": str(e),
                    "consecutive_errors": consecutive_errors
                })
            except:
                pass
            
            # Se muitos erros consecutivos, aguarda mais tempo
            if consecutive_errors >= max_consecutive_errors:
                print(f"‚ö†Ô∏è Muitos erros consecutivos ({consecutive_errors}), aguardando 30 minutos...")
                await asyncio.sleep(30 * 60)  # 30 minutos
                consecutive_errors = 0
            else:
                # Aguarda tempo progressivo baseado no n√∫mero de erros
                wait_time = min(5 * consecutive_errors, 30) * 60  # 5, 10, 15, 20, 25, 30 min
                print(f"‚è≥ Aguardando {wait_time//60} minutos antes da pr√≥xima tentativa...")
                await asyncio.sleep(wait_time)
                continue
        
        # Aguarda 10 minutos para pr√≥xima execu√ß√£o
        print("‚è≥ Aguardando 10 minutos...")
        await asyncio.sleep(10 * 60)  # 10 minutos
'''
    
    print("‚úÖ C√≥digo robusto criado")
    print("üìù Caracter√≠sticas:")
    print("   ‚Ä¢ Tratamento de erro robusto")
    print("   ‚Ä¢ Contador de erros consecutivos")
    print("   ‚Ä¢ Aguardo progressivo em caso de erro")
    print("   ‚Ä¢ Logs detalhados de erro")
    print("   ‚Ä¢ Restart autom√°tico ap√≥s muitos erros")

def update_sender_with_robust_cron():
    """Atualiza sender.py com cron robusto"""
    print(f"\nüîÑ ATUALIZANDO SENDER.PY")
    print("=" * 40)
    
    # L√™ o arquivo atual
    with open("sender.py", 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Substitui a fun√ß√£o run_cron
    old_cron = '''async def run_cron():
    """Executa o cron de 10 em 10 minutos durante hor√°rio comercial"""
    print("üïí Iniciando cron do sender (10 em 10 min, 08:00-19:25h SP)")
    
    while True:
        try:
            if HAS_TZ:
                current_time = datetime.now(BR_TZ)
            else:
                current_time = datetime.now(timezone.utc)
            print(f"‚è∞ Executando cron em {current_time}")
            await run_once()
        except Exception as e:
            print(f"‚ùå Erro no cron: {e}")
        
        # Aguarda 10 minutos
        print("‚è≥ Aguardando 10 minutos...")
        await asyncio.sleep(10 * 60)  # 10 minutos'''
    
    new_cron = '''async def run_cron():
    """Executa o cron de forma robusta (10 em 10 min, 08:00-19:25h SP)"""
    print("üïí Iniciando cron robusto do sender (10 em 10 min, 08:00-19:25h SP)")
    
    consecutive_errors = 0
    max_consecutive_errors = 5
    
    while True:
        try:
            if HAS_TZ:
                current_time = datetime.now(BR_TZ)
            else:
                current_time = datetime.now(timezone.utc)
            
            print(f"‚è∞ Executando cron em {current_time}")
            
            # Executa verifica√ß√£o
            await run_once()
            
            # Reset contador de erros em caso de sucesso
            consecutive_errors = 0
            
            print(f"‚úÖ Execu√ß√£o conclu√≠da com sucesso")
            
        except Exception as e:
            consecutive_errors += 1
            print(f"‚ùå Erro no cron (tentativa {consecutive_errors}): {e}")
            
            # Log do erro
            try:
                log_execution("error", {
                    "reason": "cron_execution_error",
                    "error": str(e),
                    "consecutive_errors": consecutive_errors
                })
            except:
                pass
            
            # Se muitos erros consecutivos, aguarda mais tempo
            if consecutive_errors >= max_consecutive_errors:
                print(f"‚ö†Ô∏è Muitos erros consecutivos ({consecutive_errors}), aguardando 30 minutos...")
                await asyncio.sleep(30 * 60)  # 30 minutos
                consecutive_errors = 0
            else:
                # Aguarda tempo progressivo baseado no n√∫mero de erros
                wait_time = min(5 * consecutive_errors, 30) * 60  # 5, 10, 15, 20, 25, 30 min
                print(f"‚è≥ Aguardando {wait_time//60} minutos antes da pr√≥xima tentativa...")
                await asyncio.sleep(wait_time)
                continue
        
        # Aguarda 10 minutos para pr√≥xima execu√ß√£o
        print("‚è≥ Aguardando 10 minutos...")
        await asyncio.sleep(10 * 60)  # 10 minutos'''
    
    # Substitui no conte√∫do
    if old_cron in content:
        new_content = content.replace(old_cron, new_cron)
        
        # Salva arquivo atualizado
        with open("sender.py", 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print("‚úÖ sender.py atualizado com cron robusto")
        return True
    else:
        print("‚ùå N√£o foi poss√≠vel encontrar fun√ß√£o run_cron para substituir")
        return False

async def main():
    """Fun√ß√£o principal"""
    print("üîß CORRE√á√ÉO DO PROBLEMA DE EXECU√á√ÉO CONT√çNUA")
    print("=" * 70)
    
    # Diagnostica problema
    await diagnose_cron_problem()
    
    # Verifica configura√ß√£o Railway
    check_railway_configuration()
    
    # Cria vers√£o robusta
    create_robust_cron()
    
    # Atualiza sender.py
    success = update_sender_with_robust_cron()
    
    if success:
        print(f"\nüéâ CORRE√á√ÉO APLICADA!")
        print("=" * 40)
        print("‚úÖ Cron robusto implementado")
        print("‚úÖ Tratamento de erro melhorado")
        print("‚úÖ Restart autom√°tico configurado")
        print("‚úÖ Logs detalhados de erro")
        print("\nüîÑ Pr√≥ximos passos:")
        print("1. Fazer commit e push")
        print("2. Aguardar deploy no Railway")
        print("3. Monitorar execu√ß√µes")
        print("4. Verificar se n√£o para mais")
    else:
        print(f"\n‚ùå FALHA NA CORRE√á√ÉO")
        print("=" * 40)
        print("üîç Verificar arquivo sender.py manualmente")

if __name__ == "__main__":
    asyncio.run(main())
